/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for private user data
 * and allows public read access to study sessions. User-specific data, such as study session
 * completions and quiz results, are stored in subcollections under each user's document.
 * This design prioritizes authorization independence, clarity, and scalability.
 *
 * Data Structure:
 * - /users/{userId}: Stores user account information. Only the user can read/write their own data.
 * - /study_sessions/{sessionId}: Stores information about study sessions. Publicly readable, but only the owner can create/modify.
 * - /users/{userId}/user_sessions/{sessionId}: Stores user-specific session data. Only the user can read/write their own data.
 * - /users/{userId}/user_quizzes/{quizId}: Stores user-specific quiz completion data. Only the user can read/write their own data.
 *
 * Key Security Decisions:
 * - User data is strictly private; no listing of users is allowed.
 * - Study sessions are publicly readable to facilitate discovery.
 * - Subcollections inherit ownership from their parent user document.
 *
 * Denormalization for Authorization:
 * - The `user_sessions` and `user_quizzes` subcollections include the `sessionId` and `quizId` respectively, within each document.
 *   This avoids the need for potentially slow and costly `get()` calls to parent documents to determine authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user account documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'scPOaGwtHlSYPjNuMlfKJONtCwC3' can create their own document.
     * @allow (get, update, delete) User with ID 'scPOaGwtHlSYPjNuMlfKJONtCwC3' can read, update, and delete their own document.
     * @deny (create) User with ID 'scPOaGwtHlSYPjNuMlfKJONtCwC3' cannot create a document with a different ID.
     * @deny (get, update, delete) User with ID 'attackerId' cannot read, update, or delete the document of user 'scPOaGwtHlSYPjNuMlfKJONtCwC3'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing of all users.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to study session documents.
     * @path /study_sessions/{sessionId}
     * @allow (get, list) Any user can read study session information.
     * @allow (create) Only the owner can create a study session. Author id must equal to request.auth.uid.
     * @allow (update, delete) Only the owner can update or delete a study session.
     * @deny (create) An unauthenticated user cannot create a study session.
     * @deny (update, delete) A non-owner cannot update or delete a study session.
     * @principle Allows public read access while restricting writes to the owner.
     */
    match /study_sessions/{sessionId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to user-specific study session data.
     * @path /users/{userId}/user_sessions/{sessionId}
     * @allow (create, get, update, delete, list) User with ID 'scPOaGwtHlSYPjNuMlfKJONtCwC3' can manage their own study session data.
     * @deny (create, get, update, delete, list) User with ID 'attackerId' cannot manage the study session data of user 'scPOaGwtHlSYPjNuMlfKJONtCwC3'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/user_sessions/{sessionId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-specific quiz completion data.
     * @path /users/{userId}/user_quizzes/{quizId}
     * @allow (create, get, update, delete, list) User with ID 'scPOaGwtHlSYPjNuMlfKJONtCwC3' can manage their own quiz completion data.
     * @deny (create, get, update, delete, list) User with ID 'attackerId' cannot manage the quiz completion data of user 'scPOaGwtHlSYPjNuMlfKJONtCwC3'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/user_quizzes/{quizId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}